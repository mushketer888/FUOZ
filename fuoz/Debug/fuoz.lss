
fuoz.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000176  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00000176  0000020a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  0000020a  2**0
                  ALLOC
  3 .stab         000006b4  00000000  00000000  0000020c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  000008c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      0000002f  00000000  00000000  00000957  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000040  00000000  00000000  00000986  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000149  00000000  00000000  000009c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000094  00000000  00000000  00000b0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000129  00000000  00000000  00000ba3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000c0  00000000  00000000  00000ccc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000000dc  00000000  00000000  00000d8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000131  00000000  00000000  00000e68  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000030  00000000  00000000  00000f99  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	3a c0       	rjmp	.+116    	; 0x78 <__vector_1>
   4:	29 c0       	rjmp	.+82     	; 0x58 <__bad_interrupt>
   6:	28 c0       	rjmp	.+80     	; 0x58 <__bad_interrupt>
   8:	73 c0       	rjmp	.+230    	; 0xf0 <__vector_4>
   a:	93 c0       	rjmp	.+294    	; 0x132 <__vector_5>
   c:	25 c0       	rjmp	.+74     	; 0x58 <__bad_interrupt>
   e:	24 c0       	rjmp	.+72     	; 0x58 <__bad_interrupt>
  10:	23 c0       	rjmp	.+70     	; 0x58 <__bad_interrupt>
  12:	22 c0       	rjmp	.+68     	; 0x58 <__bad_interrupt>
  14:	21 c0       	rjmp	.+66     	; 0x58 <__bad_interrupt>
  16:	20 c0       	rjmp	.+64     	; 0x58 <__bad_interrupt>
  18:	81 c0       	rjmp	.+258    	; 0x11c <__vector_12>
  1a:	1e c0       	rjmp	.+60     	; 0x58 <__bad_interrupt>
  1c:	1d c0       	rjmp	.+58     	; 0x58 <__bad_interrupt>
  1e:	1c c0       	rjmp	.+56     	; 0x58 <__bad_interrupt>
  20:	1b c0       	rjmp	.+54     	; 0x58 <__bad_interrupt>
  22:	1a c0       	rjmp	.+52     	; 0x58 <__bad_interrupt>
  24:	19 c0       	rjmp	.+50     	; 0x58 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf ed       	ldi	r28, 0xDF	; 223
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	e6 e7       	ldi	r30, 0x76	; 118
  36:	f1 e0       	ldi	r31, 0x01	; 1
  38:	02 c0       	rjmp	.+4      	; 0x3e <__SP_L__+0x1>
  3a:	05 90       	lpm	r0, Z+
  3c:	0d 92       	st	X+, r0
  3e:	a0 36       	cpi	r26, 0x60	; 96
  40:	b1 07       	cpc	r27, r17
  42:	d9 f7       	brne	.-10     	; 0x3a <__do_copy_data+0xc>

00000044 <__do_clear_bss>:
  44:	20 e0       	ldi	r18, 0x00	; 0
  46:	a0 e6       	ldi	r26, 0x60	; 96
  48:	b0 e0       	ldi	r27, 0x00	; 0
  4a:	01 c0       	rjmp	.+2      	; 0x4e <.do_clear_bss_start>

0000004c <.do_clear_bss_loop>:
  4c:	1d 92       	st	X+, r1

0000004e <.do_clear_bss_start>:
  4e:	a4 36       	cpi	r26, 0x64	; 100
  50:	b2 07       	cpc	r27, r18
  52:	e1 f7       	brne	.-8      	; 0x4c <.do_clear_bss_loop>
  54:	02 d0       	rcall	.+4      	; 0x5a <main>
  56:	8d c0       	rjmp	.+282    	; 0x172 <_exit>

00000058 <__bad_interrupt>:
  58:	d3 cf       	rjmp	.-90     	; 0x0 <__vectors>

0000005a <main>:
unsigned int zar = 0;

int main(void)
{
	//========init============
	cli();
  5a:	f8 94       	cli
	TIFR |= 1<<OCF1A|1<<OCF1B;
  5c:	88 b7       	in	r24, 0x38	; 56
  5e:	80 66       	ori	r24, 0x60	; 96
  60:	88 bf       	out	0x38, r24	; 56
	TIMSK |= 1<<OCIE1A|1<<OCIE1B|1<<TOIE1;//prerivanija tajmera ih tut visit azh 3 wtuki :D
  62:	89 b7       	in	r24, 0x39	; 57
  64:	80 6e       	ori	r24, 0xE0	; 224
  66:	89 bf       	out	0x39, r24	; 57
	MCUCR |= 1<<ISC00|1<<ISC01; //int0 rising
  68:	85 b7       	in	r24, 0x35	; 53
  6a:	83 60       	ori	r24, 0x03	; 3
  6c:	85 bf       	out	0x35, r24	; 53
	GIMSK = 1<<INT0;//vnewnee prerivanie
  6e:	80 e4       	ldi	r24, 0x40	; 64
  70:	8b bf       	out	0x3b, r24	; 59
	DDRB |= 1<<0;
  72:	b8 9a       	sbi	0x17, 0	; 23
	sei();
  74:	78 94       	sei
  76:	ff cf       	rjmp	.-2      	; 0x76 <main+0x1c>

00000078 <__vector_1>:




ISR(INT0_vect)
{
  78:	1f 92       	push	r1
  7a:	0f 92       	push	r0
  7c:	0f b6       	in	r0, 0x3f	; 63
  7e:	0f 92       	push	r0
  80:	11 24       	eor	r1, r1
  82:	5f 93       	push	r21
  84:	6f 93       	push	r22
  86:	7f 93       	push	r23
  88:	8f 93       	push	r24
  8a:	9f 93       	push	r25
  8c:	af 93       	push	r26
  8e:	bf 93       	push	r27
	TCCR1B |= 1<<CS10|1<<CS11;//preddelitelj na 64 zapuskaem tajmer esli dat4ik dal signal
  90:	8e b5       	in	r24, 0x2e	; 46
  92:	83 60       	ori	r24, 0x03	; 3
  94:	8e bd       	out	0x2e, r24	; 46
	vrema = TCNT1;
  96:	8c b5       	in	r24, 0x2c	; 44
  98:	9d b5       	in	r25, 0x2d	; 45
  9a:	90 93 63 00 	sts	0x0063, r25
  9e:	80 93 62 00 	sts	0x0062, r24
	TCNT1 = 0;
  a2:	1d bc       	out	0x2d, r1	; 45
  a4:	1c bc       	out	0x2c, r1	; 44
	tmp = (vrema /12);
  a6:	6c e0       	ldi	r22, 0x0C	; 12
  a8:	70 e0       	ldi	r23, 0x00	; 0
  aa:	4f d0       	rcall	.+158    	; 0x14a <__udivmodhi4>
	if (tmp > Gorenie)
  ac:	65 36       	cpi	r22, 0x65	; 101
  ae:	71 05       	cpc	r23, r1
  b0:	38 f0       	brcs	.+14     	; 0xc0 <__vector_1+0x48>
	{
		tmp = tmp - Gorenie;
  b2:	64 56       	subi	r22, 0x64	; 100
  b4:	71 09       	sbc	r23, r1
  b6:	70 93 61 00 	sts	0x0061, r23
  ba:	60 93 60 00 	sts	0x0060, r22
  be:	06 c0       	rjmp	.+12     	; 0xcc <__vector_1+0x54>
	}else{
		tmp = 1;
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	90 93 61 00 	sts	0x0061, r25
  c8:	80 93 60 00 	sts	0x0060, r24
	} 
	else
	{
		zar = vrema - Nakoplenie;// vremja zarjadki 3ms
	}*/
	OCR1A = tmp;
  cc:	80 91 60 00 	lds	r24, 0x0060
  d0:	90 91 61 00 	lds	r25, 0x0061
  d4:	9b bd       	out	0x2b, r25	; 43
  d6:	8a bd       	out	0x2a, r24	; 42
	
	
};
  d8:	bf 91       	pop	r27
  da:	af 91       	pop	r26
  dc:	9f 91       	pop	r25
  de:	8f 91       	pop	r24
  e0:	7f 91       	pop	r23
  e2:	6f 91       	pop	r22
  e4:	5f 91       	pop	r21
  e6:	0f 90       	pop	r0
  e8:	0f be       	out	0x3f, r0	; 63
  ea:	0f 90       	pop	r0
  ec:	1f 90       	pop	r1
  ee:	18 95       	reti

000000f0 <__vector_4>:

ISR(TIMER1_COMPA_vect)
{
  f0:	1f 92       	push	r1
  f2:	0f 92       	push	r0
  f4:	0f b6       	in	r0, 0x3f	; 63
  f6:	0f 92       	push	r0
  f8:	11 24       	eor	r1, r1
  fa:	8f 93       	push	r24
  fc:	9f 93       	push	r25
	Isk;	
  fe:	c0 9a       	sbi	0x18, 0	; 24
	//if(vrema <= Nakoplenie)// eto na slu4aj esli oboroti tam budut sliwkom boljwie ili dva cilindra no v etom slu4ae iskra budet v oboih cilindah odnovremenno
	//{
	//	zar = 2; //srazu vgonjaem katuwku v nakoplenie posle iskroobrazovanija
	//}
	//OCR1B = zar;
	OCR1B = tmp + 3;
 100:	80 91 60 00 	lds	r24, 0x0060
 104:	90 91 61 00 	lds	r25, 0x0061
 108:	03 96       	adiw	r24, 0x03	; 3
 10a:	99 bd       	out	0x29, r25	; 41
 10c:	88 bd       	out	0x28, r24	; 40
	
};
 10e:	9f 91       	pop	r25
 110:	8f 91       	pop	r24
 112:	0f 90       	pop	r0
 114:	0f be       	out	0x3f, r0	; 63
 116:	0f 90       	pop	r0
 118:	1f 90       	pop	r1
 11a:	18 95       	reti

0000011c <__vector_12>:

ISR(TIMER1_COMPB_vect)
{
 11c:	1f 92       	push	r1
 11e:	0f 92       	push	r0
 120:	0f b6       	in	r0, 0x3f	; 63
 122:	0f 92       	push	r0
 124:	11 24       	eor	r1, r1
	IskLow;
 126:	c0 98       	cbi	0x18, 0	; 24
};
 128:	0f 90       	pop	r0
 12a:	0f be       	out	0x3f, r0	; 63
 12c:	0f 90       	pop	r0
 12e:	1f 90       	pop	r1
 130:	18 95       	reti

00000132 <__vector_5>:

ISR(TIMER1_OVF_vect)
{
 132:	1f 92       	push	r1
 134:	0f 92       	push	r0
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	0f 92       	push	r0
 13a:	11 24       	eor	r1, r1
	IskLow;
 13c:	c0 98       	cbi	0x18, 0	; 24
	TCCR1B = 0x00;//esli dvigatelj zagluwen neza4em tratit energiju akuma na razogrev katuwki zazhiganija 
 13e:	1e bc       	out	0x2e, r1	; 46
 140:	0f 90       	pop	r0
 142:	0f be       	out	0x3f, r0	; 63
 144:	0f 90       	pop	r0
 146:	1f 90       	pop	r1
 148:	18 95       	reti

0000014a <__udivmodhi4>:
 14a:	aa 1b       	sub	r26, r26
 14c:	bb 1b       	sub	r27, r27
 14e:	51 e1       	ldi	r21, 0x11	; 17
 150:	07 c0       	rjmp	.+14     	; 0x160 <__udivmodhi4_ep>

00000152 <__udivmodhi4_loop>:
 152:	aa 1f       	adc	r26, r26
 154:	bb 1f       	adc	r27, r27
 156:	a6 17       	cp	r26, r22
 158:	b7 07       	cpc	r27, r23
 15a:	10 f0       	brcs	.+4      	; 0x160 <__udivmodhi4_ep>
 15c:	a6 1b       	sub	r26, r22
 15e:	b7 0b       	sbc	r27, r23

00000160 <__udivmodhi4_ep>:
 160:	88 1f       	adc	r24, r24
 162:	99 1f       	adc	r25, r25
 164:	5a 95       	dec	r21
 166:	a9 f7       	brne	.-22     	; 0x152 <__udivmodhi4_loop>
 168:	80 95       	com	r24
 16a:	90 95       	com	r25
 16c:	bc 01       	movw	r22, r24
 16e:	cd 01       	movw	r24, r26
 170:	08 95       	ret

00000172 <_exit>:
 172:	f8 94       	cli

00000174 <__stop_program>:
 174:	ff cf       	rjmp	.-2      	; 0x174 <__stop_program>
